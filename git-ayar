
## GIT'de yapacagimiz degisiklikler icin kullanici adi ayarlama
git config --global user.name "Mustafa Bey"

## GIT'de yapacagimiz degisiklikler icin e-mail ayarlamaa
git config --global user.email "miskin1702@gmail.com"

## Git uygulayacagimiz proje dizinine giriyoruz
## Git ayarlarimizi burada baslatiyoruz
git init

## Projede degisiklik yaptik ve bunu versiyon olarak eklemk
## istiyorsak nokta yerine yplu yazabiliriz projeye girmeden
## Git deposuna bir sey ekelemk istiyorsak once bunu tampona 
## atiyoruz bunun icin gott add komutu verilir.
## Degisikliklerin repoya yuklenmesi icin gitt commit yapilir.
git add . 
git commit -m "Versiyon aciklamasi buraya yazilir"

## Yerel projemiz ile Git reposu arasindaki dosyalarda degisiklik
## var mi yok mu? bakmak icin komut
git status

## Eger dosyada bir degisiklik oolmussa şu uyari verilir
//changes not staged for commit
## Eger dosya gitt add komutu ile tampon bolgeye ginderilmis
## ama commit edilmemis hani repoya yuklenmemis ise 
//changes to be committed
## Eger yeni bir dosya olusturulmus ama ne tamponda ne de 
## git reposunda yoksa su uyari cikar
//untracked files

## "deneme.py" adinda bir dosya olusturduksa bunu repoaya eklemek icin
git add deneme.py
git commit -m "Yapilan degisikligin aciklamasi"

## Eger varolan dosyada bir degisiklik yaptiksa ve sadece onu 
## yuklemek istiyorsak 
git commit -a

## Proje klasoru ile Staged(Tampon) furumu karsilastirmak
git status

## Proje ile Staged arasinda varolan dosyalar uzerinde yapilan
## degisiklik kiyaslama
git diff

## Staged ile Repo arasinda degisiklik farkini gormek icin
git diff --staged

## diff komutu ile eklenenler yeşil (yani guncel olanlar)
## silinen satirlar kirmizi renkte belirtilir. 

## Dosya silme
git rm deneme.py
git commit -m "deneme.py silindi"

## Klasor silme
git rm -r silinecek-klasor/
git commit -m "Klasor silkndi"

## Dosya yeniden adlandirma
git mv dosya1.py dosya2.py
git commit -m "dosya1'in adi dosya2 olarak degistirildi."

## Dosyayi baska bir klasore tasima
git mv dosya1 dosyalar/
git commit -m "dosya1 dosyalar klasorune tasindi."

## Dosyada yapilan degisiklikleri geri almak (CALISMA DIZININDE)
git checkout -- deneme.py

## Silinen dosyayi geri alma (CALISMA DIZININDE)
git checkout -- deneme.py

## Stage edilen dosyayi unstage yapma (STAGE KONUMUNDA)
git reset HEAD deneme.py  // dosya unstage edildi.
git checkout -- deneme.py // yapilan degisiklik geri alindi.

## Git reposuna yuklenmis olan degisikligi geri alma
## Aslinda yukleme olmuyor sadece commit ediyoruz. 
## Commit etme eylemi Yerel git reposunun versiyonunu
## degistirmektir. Uzak Git Repomuz ile kiyaslanacak olan
## şey bizim commit ettigimiz yerel git repomuzdur.
## Commit etme eylemine versiyon degistirme denir
## Versiyon degisitlltirmelerini gormek icin
git log
# Komutu verilir. burda bir hash degeri vardir.
# Eger versiykn geri almak istiyorsak 
git checkout donmek-istedigkmiz-versiyonun-hash-degeri -- .
# Hash degerini git log ile elde ediyoruz. Burada kullandigimiz
# nokta projemizide yaptigimkz total degisiklikleri istedigimiz
# versiyona dondurur. ama sadece bir dosya dondurmek istiyorsak
# nokta yerine dosyaadini yaziyoruz.(denene.py gibi) 

## Github'da repo olusturulur.
## Sonra git clone ile yerele kopyalanir.
## git init ile buraya git vcs kurlur.
## Degisiklikler burada yapilir sknra push ile gonderilir.
git clone https://github.com/miskin1702/git-notlarim
cd git-notlarim
git init
Degisiklikler yapilir dosyalar kopyalanir veya editlenir.
git push -u https://github.com/miskin1702/git-notlarim master


## GITHUB ile yerel git repomuzu eşitleme
## Once repo adresi kopyalanir.
## Sknra esitlenecek proje klasorune gidilir.
git remote add TakmaAd https://github.com/miskin1702/git-notlarim

## Yerel Git repomuzu Uzak Github Repomuza eşitliyoruz.
git push -u TakmaAd master
